@page "/skillsmatrix"
@using Savitar.Domain.Models.Entities.CV
@inject HttpClient Http
@attribute [AllowAnonymous]

<BasePage Title="Skills Matrix" OnInitData="OnInitData">
    @* Icons from here: https://iconscout.com/unicons/explore/line Color used #100ED8 *@

    @if (_technologies == null)
    {
        <MudContainer Class="spinner" />
    }
    else
    {        
        <MudGrid>
            @foreach (var categoryName in GetCategoryNames())
            {
                <MudItem xs="12">
                    <MudCard Outlined="true">
                        <MudCardHeader Class="pl-5 py-1" style="background-color: var(--mud-palette-background-grey)">
                            <MudText Typo="Typo.h6"><img src="Images/@(categoryName.Replace(" ", "")).png" style="width: 24px;"> @categoryName</MudText>                                
                        </MudCardHeader>

                        <MudCardContent Class="pa=0">
                            <MudTable Elevation="25" Outlined="true" Hover="true" Breakpoint="Breakpoint.MdAndDown" Items="@GetProjectTechnologies(categoryName).OrderBy(x => x.DevelopmentTechnologyCategory.Name).ThenByDescending(x => x.LastUse ?? DateTime.Now.Date).ThenByDescending(x => x.Proficiency)">
                                <HeaderContent>
                                    <MudTh><b>Skill</b></MudTh>
                                    <MudTh><b>Last Use</b></MudTh>
                                    <MudTh><b>Proficiency</b></MudTh>
                                    <MudTh><b>Years</b></MudTh>
                                    <MudTh><b>First Use</b></MudTh>
                                    <MudTh></MudTh>
                                </HeaderContent>
                                <RowTemplate>
                                    <MudTd DataLabel="Skill">@context.Name</MudTd>
                                    <MudTd DataLabel="Last Use">@(GetLastUseText(context))</MudTd>
                                    <MudTd DataLabel="Proficiency">@context.Proficiency</MudTd>
                                    <MudTd DataLabel="Years" Style="text-align: right">@($"{GetYears(context):0.0}")</MudTd>                                
                                    <MudTd DataLabel="First Use" Style="text-align: center">@($"{context.FirstUse:yyyy}")</MudTd>
                                    <MudTd></MudTd>
                                </RowTemplate>
                                <ColGroup>
                                    <col style="width: 180px;" />
                                    <col style="width: 145px;" />
                                    <col style="width: 100px;" />
                                    <col style="width: 45px;"/>
                                    <col style="width: 90px;"/>
                                    <col />
                                </ColGroup>
                            </MudTable>
                        </MudCardContent>
                    </MudCard>                
                </MudItem>
            }
        </MudGrid>
    }

    <style>
        th {
            background-color: lightslategray;
        }
    </style>


    @code {
        private DevelopmentTechnology[] _technologies;    

        protected async Task OnInitData(BasePageServices basePageServices)
        {
            _technologies = await Http.GetFromJsonAsync<DevelopmentTechnology[]>("api/SkillsMatrix");
            var aaa = _technologies;
        }

        protected IList<string> GetCategoryNames()
        {
            return _technologies                
                .Select(x => x.DevelopmentTechnologyCategory.Name)
                .Distinct()
                .ToList();
        }

        protected IList<DevelopmentTechnology> GetProjectTechnologies(string categoryName)
        {
            return _technologies
                .Where(x => x.DevelopmentTechnologyCategory.Name == categoryName)
                .ToList();
        }

        protected string GetLastUseText(DevelopmentTechnology technology)
        {
            if (!technology.LastUse.HasValue)
                return "Current";

            var lastUsed = technology.LastUse.Value;
            var timeSinceLastUsed = DateTime.Now.Date - technology.LastUse.Value;

            if (timeSinceLastUsed.TotalDays < 30)
                return "Current";
            if (timeSinceLastUsed.TotalDays < 90)
                return "Recently";
            if (timeSinceLastUsed.TotalDays < 180)
                return "Fairly recently";
            if (timeSinceLastUsed.TotalDays < 360)
                return "< 1 year ago";

            var years = timeSinceLastUsed.TotalDays / 365.0;
            if (years < 2)
                return "    a year ago";
            if (years < 6)
                return "> 5 years";
            if (years < 11)
                return "> 10 years";

            return "Long long ago...";
        }

        protected double? GetYears(DevelopmentTechnology technology)
        {
            var lastUsed = DateTime.Now.Date;
            if (technology.LastUse.HasValue)
                lastUsed = technology.LastUse.Value;


            var x = (lastUsed - technology.FirstUse).TotalDays / 365.0;
            return Math.Round(x / 0.5, MidpointRounding.AwayFromZero) * 0.5;
        }
    }
</BasePage>