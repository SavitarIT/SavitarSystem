@page "/sysadmin/users"
@using Savitar.Domain.Models.Dtos
@inject HttpClient _httpClient
@inject IUsersApi _usersApi;

<BasePage Title="Users" OnInitData="OnIntData">
    <MudTable 
            Items="Items"
            Hover="true" Breakpoint="Breakpoint.Sm"
            CanCancelEdit="true" FixedHeader="true" FixedFooter="true"
            Filter="new Func<User, bool>(Search)"
            CommitEditTooltip="Save Changes" CancelEditTooltip="Cancel Changes" OnCommitEditClick="SaveChanges"
            RowEditPreview="BackupItem" RowEditCancel="RestoreItem" RowEditCommit="SaveItem">
        <ToolBarContent>
            <div>
                <MudButton DisableElevation Variant="Variant.Filled" Color="Color.Primary" StartIcon="@Icons.Material.Filled.Add" IconColor="Color.Surface">"Create"</MudButton>
                <MudButton DisableElevation Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Refresh" IconColor="Color.Surface" Color="Color.Primary">"Reload"</MudButton>
                    
                <MudButton DisableElevation Variant="Variant.Filled" StartIcon="@Icons.Custom.FileFormats.FileExcel" IconColor="Color.Secondary" Color="Color.Surface" Style="margin-left: 5px;">"Export"</MudButton>
            </div>


            @*<MudText Typo="Typo.h6">User Listing</MudText>
            <MudSpacer/>
            <MudTextField @bind-Value="_searchString" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>*@
        </ToolBarContent>
        <HeaderContent>
            <MudTh><MudTableSortLabel SortBy="new Func<User, object>(x => x.Email)"><b>Email</b></MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<User, object>(x => x.FirstName)"><b>First Name</b></MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<User, object>(x => x.LastName)"><b>Last Name</b></MudTableSortLabel></MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Email">@context.Email</MudTd>
            <MudTd DataLabel="First Name">@context.FirstName</MudTd>
            <MudTd DataLabel="Last Name">@context.LastName</MudTd>
        </RowTemplate>
        <RowEditingTemplate>
            <MudTd DataLabel="Email">@context.Email</MudTd>
            <MudTd DataLabel="First Name">
                <MudTextField @bind-Value="@context.FirstName" Required/>
            </MudTd>
            <MudTd DataLabel="Last Name">
                <MudTextField @bind-Value="@context.LastName" Required/>
            </MudTd>
        </RowEditingTemplate>
        <PagerContent>
            <MudTablePager/>
        </PagerContent>
        <ColGroup>
            <col/>
            <col style="width: 150px;"/>
            <col style="width: 150px;"/>
        </ColGroup>
    </MudTable>

    @code {
        public IEnumerable<User> Items { get; private set; } = null;
        private string _searchString = "";
        private User _itemBeforeEdit;

        private async Task OnIntData(BasePageServices obj)
        {
            Items = await _usersApi.GetAllUsersAsync();
        }

        private bool Search(User model)
        {
            if (string.IsNullOrWhiteSpace(_searchString))
                return true;
            if (model.Email.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
                return true;
            if (model.FirstName.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
                return true;
            if (model.LastName.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
                return true;
            return false;
        }

        private void SaveItem(object element)
        {
            StateHasChanged();
            _snackbar.Add("SaveItem");
        }

        private void SaveChanges(MouseEventArgs args)
        {
            Console.WriteLine(args);
            _snackbar.Add("SaveChanges");
        }

        private void BackupItem(object item)
        {
            if (item is not User dataItem)
                return;

            _itemBeforeEdit = new User
            {            
                Email = dataItem.Email,
                FirstName = dataItem.FirstName,
                LastName = dataItem.LastName
            };
            
            StateHasChanged();
        }

        private void RestoreItem(object item)
        {
            if (item is not User dataItem)
                return;

            dataItem.Email = _itemBeforeEdit.Email;
            dataItem.FirstName = _itemBeforeEdit.FirstName;
            dataItem.LastName = _itemBeforeEdit.LastName;
            
            StateHasChanged();
        }
    }
</BasePage>