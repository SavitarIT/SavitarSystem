@page "/sysadmin/users"
@using Savitar.Domain.Models.Dtos
@inject HttpClient _httpClient
@inject IUsersApi _usersApi;

<BasePage Title="Users" OnInitData="OnInitDataAsync">
    @if (_items == null)
    {
        <MudContainer Class="spinner" />
    }
    else
    {
        <MudTable Items="@_items" Hover="true" Breakpoint="Breakpoint.Sm" 
                  CanCancelEdit="true" FixedHeader="true" FixedFooter="true" 
                  Filter="new Func<User, bool>(FilterFunc)"  @bind-SelectedItem="_selectedItem"
                  CommitEditTooltip="Commit Edit" OnCommitEditClick="@(() => _snackbar.Add("Commit Edit Handler Invoked"))"
                  RowEditPreview="BackupItem" RowEditCancel="RestoreItem" RowEditCommit="SaveItem">
            <ToolBarContent>
                <MudText Typo="Typo.h6">User Listing</MudText>
                <MudSpacer />
                <MudTextField @bind-Value="_searchString" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
            </ToolBarContent>
            <HeaderContent>
                <MudTh><MudTableSortLabel SortBy="new Func<User, object>(x=>x.Email)"><b>Email</b></MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel SortBy="new Func<User, object>(x=>x.FirstName)"><b>First Name</b></MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel SortBy="new Func<User, object>(x=>x.LastName)"><b>Last Name</b></MudTableSortLabel></MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="Email">@context.Email</MudTd>
                <MudTd DataLabel="First Name">@context.FirstName</MudTd>
                <MudTd DataLabel="Last Name">@context.LastName</MudTd>
            </RowTemplate>
            <RowEditingTemplate>
                <MudTd DataLabel="Email">@context.Email</MudTd>
                <MudTd DataLabel="First Name">
                    <MudTextField @bind-Value="@context.FirstName" Required />
                </MudTd>
                <MudTd DataLabel="Last Name">
                    <MudTextField @bind-Value="@context.LastName" Required />
                </MudTd>
            </RowEditingTemplate>
            <PagerContent>
                <MudTablePager />
            </PagerContent>
            <ColGroup>
                <col/>
                <col style="width: 150px;"/>
                <col style="width: 150px;"/>
            </ColGroup>
        </MudTable>
    }

    @code {
        private IEnumerable<User> _items;
        private string _searchString = "";
        private User _selectedItem = null;
        private User _elementBeforeEdit;

        protected async Task OnInitDataAsync(BasePageServices basePageServices)
        {
            _items = await _usersApi.GetAllUsersAsync();
        }

        private bool FilterFunc(User element) => FilterFunc(element, _searchString);
        private bool FilterFunc(User element, string searchString)
        {
            if (string.IsNullOrWhiteSpace(searchString))
                return true;
            if (element.Email.Contains(searchString, StringComparison.OrdinalIgnoreCase))
                return true;
            if (element.FirstName.Contains(searchString, StringComparison.OrdinalIgnoreCase))
                return true;
            if (element.LastName.Contains(searchString, StringComparison.OrdinalIgnoreCase))
                return true;
            return false;
        }

        private void SaveItem(object element)
        {
            StateHasChanged();
        }

        private void BackupItem(object element)
        {
            _elementBeforeEdit = new User
            {            
                Email = ((User)element).Email,
                FirstName = ((User)element).FirstName,
                LastName = ((User)element).LastName
            };
            StateHasChanged();
        }

        private void RestoreItem(object element)
        {
            ((User)element).Email = _elementBeforeEdit.Email;
            ((User)element).FirstName = _elementBeforeEdit.FirstName;
            ((User)element).LastName = _elementBeforeEdit.LastName;
            
            StateHasChanged();
        }
    }
</BasePage>